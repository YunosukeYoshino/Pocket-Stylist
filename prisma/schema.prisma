// Pocket Stylist AI - Prisma Schema
// データベース設計: https://github.com/YunosukeYoshino/Pocket-Stylist/blob/main/docs/data_models.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique @db.VarChar(255)
  name        String?  @db.VarChar(100)
  auth0Id     String   @unique @map("auth0_id") @db.VarChar(255)
  avatarUrl   String?  @map("avatar_url") @db.Text
  gender      Gender?
  birthDate   DateTime? @map("birth_date") @db.Date
  phone       String?  @db.VarChar(20)
  preferences Json?    @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  bodyProfiles          BodyProfile[]
  garments              Garment[]
  tryons                Tryon[]
  outfits               Outfit[]
  orders                Order[]
  aiRecommendations     AiRecommendation[]
  aiRecommendationFeedback AiRecommendationFeedback[]
  userStyleProfiles     UserStyleProfile[]

  @@map("users")
}

model BodyProfile {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @unique @map("user_id") @db.Uuid
  height          Int?      @db.Integer
  weight          Int?      @db.Integer
  bodyType        String?   @map("body_type") @db.VarChar(50)
  skinTone        String?   @map("skin_tone") @db.VarChar(50)
  measurements    Json?     @db.JsonB
  fitPreferences  String?   @map("fit_preferences") @db.VarChar(100)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tryons Tryon[]

  @@map("body_profiles")
}

model Garment {
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @map("user_id") @db.Uuid
  name         String      @db.VarChar(200)
  category     String      @db.VarChar(50)
  subcategory  String?     @db.VarChar(50)
  brand        String?     @db.VarChar(100)
  color        String?     @db.VarChar(50)
  size         String?     @db.VarChar(20)
  material     String?     @db.VarChar(100)
  price        Decimal?    @db.Decimal(10, 2)
  imageUrl     String?     @map("image_url") @db.Text
  tags         Json?       @db.JsonB
  condition    Condition?
  isFavorite   Boolean     @default(false) @map("is_favorite")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitItems  OutfitItem[]
  orderItems   OrderItem[]
  tryonItems   TryonGarment[]

  @@map("garments")
}

model Tryon {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  bodyProfileId   String   @map("body_profile_id") @db.Uuid
  sessionId       String   @map("session_id") @db.VarChar(100)
  aiAnalysis      String?  @map("ai_analysis") @db.Text
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bodyProfile BodyProfile     @relation(fields: [bodyProfileId], references: [id], onDelete: Cascade)
  results     TryonResult[]
  garments    TryonGarment[]

  @@map("tryons")
}

model TryonResult {
  id              String   @id @default(uuid()) @db.Uuid
  tryonId         String   @map("tryon_id") @db.Uuid
  resultImageUrl  String   @map("result_image_url") @db.Text
  overlayData     String?  @map("overlay_data") @db.Text
  fitAnalysis     Json?    @map("fit_analysis") @db.JsonB
  rating          Decimal? @db.Decimal(2, 1)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  tryon Tryon @relation(fields: [tryonId], references: [id], onDelete: Cascade)

  @@map("tryon_results")
}

model TryonGarment {
  id        String   @id @default(uuid()) @db.Uuid
  tryonId   String   @map("tryon_id") @db.Uuid
  garmentId String   @map("garment_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  tryon   Tryon   @relation(fields: [tryonId], references: [id], onDelete: Cascade)
  garment Garment @relation(fields: [garmentId], references: [id], onDelete: Cascade)

  @@unique([tryonId, garmentId])
  @@map("tryon_garments")
}

model Outfit {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  name          String   @db.VarChar(200)
  occasion      String?  @db.VarChar(50)
  season        Season?
  weather       String?  @db.VarChar(50)
  aiDescription String?  @map("ai_description") @db.Text
  isFavorite    Boolean  @default(false) @map("is_favorite")
  likesCount    Int      @default(0) @map("likes_count") @db.Integer
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OutfitItem[]

  @@map("outfits")
}

model OutfitItem {
  id           String   @id @default(uuid()) @db.Uuid
  outfitId     String   @map("outfit_id") @db.Uuid
  garmentId    String   @map("garment_id") @db.Uuid
  category     String   @db.VarChar(50)
  displayOrder Int      @map("display_order") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  outfit  Outfit  @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  garment Garment @relation(fields: [garmentId], references: [id], onDelete: Cascade)

  @@unique([outfitId, garmentId])
  @@unique([outfitId, displayOrder])
  @@map("outfit_items")
}

model Order {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  orderNumber     String    @unique @map("order_number") @db.VarChar(50)
  status          OrderStatus
  totalAmount     Decimal   @map("total_amount") @db.Decimal(10, 2)
  shippingAddress String    @map("shipping_address") @db.Text
  paymentMethod   String    @map("payment_method") @db.VarChar(50)
  shippedAt       DateTime? @map("shipped_at") @db.Timestamptz
  deliveredAt     DateTime? @map("delivered_at") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid()) @db.Uuid
  orderId    String   @map("order_id") @db.Uuid
  garmentId  String   @map("garment_id") @db.Uuid
  quantity   Int      @db.Integer
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  garment Garment @relation(fields: [garmentId], references: [id], onDelete: Restrict)

  @@map("order_items")
}

// AI Recommendation Models
model AiRecommendation {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  recommendationId  String   @unique @map("recommendation_id") @db.VarChar(100)
  type              RecommendationType
  status            RecommendationStatus
  occasion          String?  @db.VarChar(50)
  season            Season?
  weather           String?  @db.VarChar(50)
  context           Json?    @db.JsonB
  styleAnalysis     Json?    @map("style_analysis") @db.JsonB
  personalizationInsights Json? @map("personalization_insights") @db.JsonB
  confidenceScore   Decimal? @map("confidence_score") @db.Decimal(3, 2)
  claudeTokensUsed  Int?     @map("claude_tokens_used") @db.Integer
  claudeCost        Decimal? @map("claude_cost") @db.Decimal(10, 6)
  processingTime    Int?     @map("processing_time") @db.Integer
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     AiRecommendationItem[]
  feedback  AiRecommendationFeedback[]

  @@map("ai_recommendations")
}

model AiRecommendationItem {
  id                 String   @id @default(uuid()) @db.Uuid
  recommendationId   String   @map("recommendation_id") @db.Uuid
  outfitId           String   @map("outfit_id") @db.VarChar(100)
  outfitName         String   @map("outfit_name") @db.VarChar(200)
  outfitDescription  String   @map("outfit_description") @db.Text
  displayOrder       Int      @map("display_order") @db.Integer
  confidenceScore    Decimal  @map("confidence_score") @db.Decimal(3, 2)
  colorAnalysis      Json?    @map("color_analysis") @db.JsonB
  stylingTips        Json?    @map("styling_tips") @db.JsonB
  garmentIds         Json     @map("garment_ids") @db.JsonB
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  recommendation AiRecommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)

  @@unique([recommendationId, outfitId])
  @@map("ai_recommendation_items")
}

model AiRecommendationFeedback {
  id               String       @id @default(uuid()) @db.Uuid
  recommendationId String       @map("recommendation_id") @db.Uuid
  userId           String       @map("user_id") @db.Uuid
  outfitId         String?      @map("outfit_id") @db.VarChar(100)
  feedbackType     FeedbackType @map("feedback_type")
  rating           Decimal?     @db.Decimal(2, 1)
  comment          String?      @db.Text
  metadata         Json?        @db.JsonB
  createdAt        DateTime     @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  recommendation AiRecommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_recommendation_feedback")
}

model UserStyleProfile {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  styleProfile          String    @map("style_profile") @db.Text
  dominantStyles        Json      @map("dominant_styles") @db.JsonB
  colorPreferences      Json      @map("color_preferences") @db.JsonB
  brandPreferences      Json      @map("brand_preferences") @db.JsonB
  occasionPatterns      Json      @map("occasion_patterns") @db.JsonB
  seasonalPatterns      Json      @map("seasonal_patterns") @db.JsonB
  bodyTypeConsiderations Json?    @map("body_type_considerations") @db.JsonB
  improvementAreas      Json?     @map("improvement_areas") @db.JsonB
  suggestedPurchases    Json?     @map("suggested_purchases") @db.JsonB
  styleEvolution        String?   @map("style_evolution") @db.Text
  lastAnalyzed          DateTime? @map("last_analyzed") @db.Timestamptz
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_style_profiles")
}

model WeatherData {
  id          String   @id @default(uuid()) @db.Uuid
  location    String   @db.VarChar(100)
  temperature Decimal  @db.Decimal(5, 2)
  condition   String   @db.VarChar(50)
  humidity    Int      @db.Integer
  windSpeed   Decimal? @map("wind_speed") @db.Decimal(5, 2)
  uvIndex     Int?     @map("uv_index") @db.Integer
  season      Season
  metadata    Json?    @db.JsonB
  recordedAt  DateTime @map("recorded_at") @db.Timestamptz
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("weather_data")
}

// Enums
enum Gender {
  male
  female
  other
}

enum Condition {
  new
  like_new @map("like_new")
  good
  fair
}

enum Season {
  spring
  summer
  fall
  winter
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  cancelled
  returned
  refunded
}

enum RecommendationType {
  styling_recommendations @map("styling_recommendations")
  outfit_suggestions      @map("outfit_suggestions")
  seasonal_updates        @map("seasonal_updates")
  trend_analysis          @map("trend_analysis")
  color_matching          @map("color_matching")
  body_type_optimization  @map("body_type_optimization")
}

enum RecommendationStatus {
  pending
  processing
  completed
  failed
  expired
}

enum FeedbackType {
  like
  dislike
  favorite
  rating
  comment
  worn
  purchased
  skipped
}
