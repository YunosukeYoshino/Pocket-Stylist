// Pocket Stylist AI - Prisma Schema
// データベース設計: https://github.com/YunosukeYoshino/Pocket-Stylist/blob/main/docs/data_models.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique @db.VarChar(255)
  name        String?  @db.VarChar(100)
  auth0Id     String   @unique @map("auth0_id") @db.VarChar(255)
  avatarUrl   String?  @map("avatar_url") @db.Text
  gender      Gender?
  birthDate   DateTime? @map("birth_date") @db.Date
  phone       String?  @db.VarChar(20)
  preferences Json?    @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  bodyProfiles BodyProfile[]
  garments     Garment[]
  tryons       Tryon[]
  outfits      Outfit[]
  orders       Order[]

  @@index([createdAt], name: "users_created_at_idx")
  @@index([updatedAt], name: "users_updated_at_idx")
  @@map("users")
}

model BodyProfile {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @unique @map("user_id") @db.Uuid
  height          Int?      @db.Integer
  weight          Int?      @db.Integer
  bodyType        String?   @map("body_type") @db.VarChar(50)
  skinTone        String?   @map("skin_tone") @db.VarChar(50)
  measurements    Json?     @db.JsonB
  fitPreferences  String?   @map("fit_preferences") @db.VarChar(100)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tryons Tryon[]

  @@index([createdAt], name: "body_profiles_created_at_idx")
  @@index([updatedAt], name: "body_profiles_updated_at_idx")
  @@map("body_profiles")
}

model Garment {
  id           String      @id @default(uuid()) @db.Uuid
  userId       String      @map("user_id") @db.Uuid
  name         String      @db.VarChar(200)
  category     String      @db.VarChar(50)
  subcategory  String?     @db.VarChar(50)
  brand        String?     @db.VarChar(100)
  color        String?     @db.VarChar(50)
  size         String?     @db.VarChar(20)
  material     String?     @db.VarChar(100)
  price        Decimal?    @db.Decimal(10, 2)
  imageUrl     String?     @map("image_url") @db.Text
  tags         Json?       @db.JsonB
  condition    Condition?
  isFavorite   Boolean     @default(false) @map("is_favorite")
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfitItems  OutfitItem[]
  orderItems   OrderItem[]
  tryonItems   TryonGarment[]

  @@index([userId], name: "garments_user_id_idx")
  @@index([category], name: "garments_category_idx")
  @@index([subcategory], name: "garments_subcategory_idx")
  @@index([brand], name: "garments_brand_idx")
  @@index([isFavorite], name: "garments_is_favorite_idx")
  @@index([createdAt], name: "garments_created_at_idx")
  @@index([userId, category], name: "garments_user_category_idx")
  @@index([userId, isFavorite], name: "garments_user_favorite_idx")
  @@map("garments")
}

model Tryon {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  bodyProfileId   String   @map("body_profile_id") @db.Uuid
  sessionId       String   @map("session_id") @db.VarChar(100)
  aiAnalysis      String?  @map("ai_analysis") @db.Text
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bodyProfile BodyProfile     @relation(fields: [bodyProfileId], references: [id], onDelete: Cascade)
  results     TryonResult[]
  garments    TryonGarment[]

  @@index([userId], name: "tryons_user_id_idx")
  @@index([bodyProfileId], name: "tryons_body_profile_id_idx")
  @@index([sessionId], name: "tryons_session_id_idx")
  @@index([createdAt], name: "tryons_created_at_idx")
  @@index([userId, createdAt], name: "tryons_user_created_at_idx")
  @@map("tryons")
}

model TryonResult {
  id              String   @id @default(uuid()) @db.Uuid
  tryonId         String   @map("tryon_id") @db.Uuid
  resultImageUrl  String   @map("result_image_url") @db.Text
  overlayData     String?  @map("overlay_data") @db.Text
  fitAnalysis     Json?    @map("fit_analysis") @db.JsonB
  rating          Decimal? @db.Decimal(2, 1)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  tryon Tryon @relation(fields: [tryonId], references: [id], onDelete: Cascade)

  @@index([tryonId], name: "tryon_results_tryon_id_idx")
  @@index([rating], name: "tryon_results_rating_idx")
  @@index([createdAt], name: "tryon_results_created_at_idx")
  @@map("tryon_results")
}

model TryonGarment {
  id        String   @id @default(uuid()) @db.Uuid
  tryonId   String   @map("tryon_id") @db.Uuid
  garmentId String   @map("garment_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  tryon   Tryon   @relation(fields: [tryonId], references: [id], onDelete: Cascade)
  garment Garment @relation(fields: [garmentId], references: [id], onDelete: Cascade)

  @@unique([tryonId, garmentId])
  @@map("tryon_garments")
}

model Outfit {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  name          String   @db.VarChar(200)
  occasion      String?  @db.VarChar(50)
  season        Season?
  weather       String?  @db.VarChar(50)
  aiDescription String?  @map("ai_description") @db.Text
  isFavorite    Boolean  @default(false) @map("is_favorite")
  likesCount    Int      @default(0) @map("likes_count") @db.Integer
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OutfitItem[]

  @@index([userId], name: "outfits_user_id_idx")
  @@index([occasion], name: "outfits_occasion_idx")
  @@index([season], name: "outfits_season_idx")
  @@index([isFavorite], name: "outfits_is_favorite_idx")
  @@index([likesCount], name: "outfits_likes_count_idx")
  @@index([createdAt], name: "outfits_created_at_idx")
  @@index([userId, isFavorite], name: "outfits_user_favorite_idx")
  @@index([userId, season], name: "outfits_user_season_idx")
  @@map("outfits")
}

model OutfitItem {
  id           String   @id @default(uuid()) @db.Uuid
  outfitId     String   @map("outfit_id") @db.Uuid
  garmentId    String   @map("garment_id") @db.Uuid
  category     String   @db.VarChar(50)
  displayOrder Int      @map("display_order") @db.Integer
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  outfit  Outfit  @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  garment Garment @relation(fields: [garmentId], references: [id], onDelete: Cascade)

  @@unique([outfitId, garmentId])
  @@unique([outfitId, displayOrder])
  @@index([outfitId], name: "outfit_items_outfit_id_idx")
  @@index([garmentId], name: "outfit_items_garment_id_idx")
  @@index([category], name: "outfit_items_category_idx")
  @@index([displayOrder], name: "outfit_items_display_order_idx")
  @@map("outfit_items")
}

model Order {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  orderNumber     String    @unique @map("order_number") @db.VarChar(50)
  status          OrderStatus
  totalAmount     Decimal   @map("total_amount") @db.Decimal(10, 2)
  shippingAddress String    @map("shipping_address") @db.Text
  paymentMethod   String    @map("payment_method") @db.VarChar(50)
  shippedAt       DateTime? @map("shipped_at") @db.Timestamptz
  deliveredAt     DateTime? @map("delivered_at") @db.Timestamptz
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@index([userId], name: "orders_user_id_idx")
  @@index([status], name: "orders_status_idx")
  @@index([createdAt], name: "orders_created_at_idx")
  @@index([shippedAt], name: "orders_shipped_at_idx")
  @@index([deliveredAt], name: "orders_delivered_at_idx")
  @@index([userId, status], name: "orders_user_status_idx")
  @@index([userId, createdAt], name: "orders_user_created_at_idx")
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid()) @db.Uuid
  orderId    String   @map("order_id") @db.Uuid
  garmentId  String   @map("garment_id") @db.Uuid
  quantity   Int      @db.Integer
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  garment Garment @relation(fields: [garmentId], references: [id], onDelete: Restrict)

  @@index([orderId], name: "order_items_order_id_idx")
  @@index([garmentId], name: "order_items_garment_id_idx")
  @@index([createdAt], name: "order_items_created_at_idx")
  @@map("order_items")
}

// Enums
enum Gender {
  male
  female
  other
}

enum Condition {
  new
  like_new @map("like_new")
  good
  fair
}

enum Season {
  spring
  summer
  fall
  winter
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  cancelled
  returned
  refunded
}
